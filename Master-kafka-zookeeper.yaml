apiVersion: v1
kind: ConfigMap
metadata:
  name: service-config
data:
  server.properties: |
    advertised.listeners=PLAINTEXT://kafka-service.default.svc.cluster.local:9092
    broker.id=0
    num.network.threads=3
    num.io.threads=8
    socket.send.buffer.bytes=102400
    socket.receive.buffer.bytes=102400
    socket.request.max.bytes=104857600
    log.dirs=/opt/kafka_2.12-3.6.0/data/kafka
    num.partitions=1
    num.recovery.threads.per.data.dir=1
    offsets.topic.replication.factor=1
    transaction.state.log.replication.factor=1
    transaction.state.log.min.isr=1
    log.flush.interval.ms=1000
    log.retention.hours=168
    log.retention.bytes=1073741824
    log.segment.bytes=1073741824
    log.retention.check.interval.ms=300000
    zookeeper.connect=zookeeper-service.default.svc.cluster.local:2181
    zookeeper.connection.timeout.ms=18000
    group.initial.rebalance.delay.ms=0

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: zookeeper-config
data:
  zookeeper.properties: |
    dataDir=/opt/kafka_2.12-3.6.0/data/zookeeper
    clientPort=2181
    maxClientCnxns=0
    admin.enableServer=false
    # admin.serverPort=8080

---

apiVersion: v1
kind: Service
metadata:
  name: zookeeper-service
spec:
  selector:
    component: zookeeper-app
    zone: kafka
    tier: backend
  type: LoadBalancer
  ports:
  - protocol: 'TCP'
    port: 2181
    targetPort: 2181
  # - protocol: 'TCP'
  #   port: 2000
  #   targetPort: 2000

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: zookeeper-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      component: zookeeper-app
      zone: kafka
      tier: backend
  template:
    metadata:
      labels:
        component: zookeeper-app
        zone: kafka
        tier: backend
    spec:
      hostname: zookeeper
      containers:
      - name: zookeeper
        image: confluentinc/cp-zookeeper:6.2.0
        #imagePullPolicy: Always
        env:
          - name: ZOOKEEPER_CLIENT_PORT
            value: "2181"
          - name: ZOOKEEPER_TICK_TIME
            value: "2000"
        resources:
          limits:
            memory: "300Mi"
            cpu: "250m"
        ports:
          - containerPort: 2181
        livenessProbe:
          tcpSocket:
            port: 2181
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          tcpSocket:
            port: 2181
          initialDelaySeconds: 5
          periodSeconds: 5

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-deployment
spec:
  replicas: 1 
  selector:
    matchLabels:
      component: kafka-app
      tier: backend
      zone: kafka
  template:
    metadata:
      labels:
        component: kafka-app
        zone: kafka
        tier: backend
    spec:
      hostname: kafka
      initContainers:
      # - name: wait-for-zookeeper
      #   image: busybox:1.32
      #   command: ['sh', '-c', 'until nc -zv zookeeper 2181; do echo "Waiting for Zookeeper"; sleep 1; done;']
      # - name: my-init
      #   image: busybox:1.32
      #   command: ['sh', '-c', 'until nslookup -port=2181 zookeeper.subdomain.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for service1.svc.myapp.svc.cluster.local; sleep 10; done;']
      # Below is just ok waits for service up
      # - name: init-zookeeper-service
      #   image: alpine
      #   command: ['sh', '-c', 'until nslookup zookeeper-service.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for zookeeper-service; sleep 5; done;']
      - name: wait-for-zookeeper-busybox
        image: busybox:1.32
        command: ["sh", "-c", "until nc -z zookeeper-service 2181 > /dev/null; do echo Waiting for Zookeeper Service.; sleep 3; done;"]

      containers:
      - name: kafka
        image: venkatsaijanumpally/kafka-centos:2.12-3.6.0
        imagePullPolicy: Always
        ports:
          - containerPort: 9093
          - containerPort: 9092
        volumeMounts:
          - name: kafka-config-server
            mountPath: /opt/kafka_2.12-3.6.0/config/server.properties
            subPath: server.properties
          - name: kafka-config-zookeeper
            mountPath: /opt/kafka_2.12-3.6.0/config/zookeeper.properties
            subPath: zookeeper.properties
          # - name: kafka-entryscript
          #   mountPath: /opt/kafka_2.12-3.6.0/entryscript.sh
        resources: 
          limits:
            memory: "1Gi"
            cpu: "400m"
      volumes:
      - name: kafka-config-server
        configMap:
          name: service-config
      - name: kafka-config-zookeeper
        configMap:
          name: zookeeper-config
      # - name: kafka-config-server
      #   hostPath:
      #     path: /Kafka/config/zookeeper.properties
      # - name: kafka-entryscript
      #   hostPath:
      #     path: /Kafka/entryscript.sh

---

apiVersion: v1
kind: Service
metadata:
  name: kafka-service
spec:
  selector:
    component: kafka-app
    tier: backend
    zone: kafka
  ports:
    - protocol: 'TCP'
      port: 9092
      targetPort: 9092
  type: LoadBalancer
